{"version":3,"file":"SyncStatus-a63f84af.js","sources":["../../../../../../../icons/refresh-black.svg","../../../../../../../icons/refresh.svg","../../../../../../../icons/block.svg","../../../../../../../icons/connection.svg","../../src/utilities.ts","../../src/pages/PairDevice/SyncStatus.tsx"],"sourcesContent":["export default \"__VITE_PUBLIC_ASSET__759981b5__\"","export default \"__VITE_PUBLIC_ASSET__3a57a908__\"","export default \"__VITE_PUBLIC_ASSET__909f2aad__\"","export default \"__VITE_PUBLIC_ASSET__89b621d4__\"","/**\n * Asserts that a case in a switch statement is unreachable.\n *\n * @example\n * // Exhaustively checks `user.role` type (\"admin\" | \"user\") and will not compile\n * // if a new role is added without adding a case to the switch statement.\n * switch (user.role) {\n *    case \"admin\":\n *       break;\n *    case \"user\":\n *      break;\n *    default:\n *      assertUnreachable(user.role);\n * }\n */\nexport function assertUnreachable(value: never): never {\n    throw new Error(`Unreachable case: ${value}`);\n}\n\nexport const convertSecondsToTimerFormat = (seconds: number) => {\n    const minutes = Math.floor(seconds / 60)\n    const remainingSeconds = seconds % 60\n    return `${String(minutes).padStart(2, '0')}:${String(remainingSeconds).padStart(2, '0')}`\n  }","import { useEffect, useState } from 'react'\nimport { XStack, YStack } from 'tamagui'\nimport { Button, IconButton, InformationBox, Text } from '@status-im/components'\n\nimport Icon from '../../components/General/Icon'\nimport RefreshBlackIcon from '/icons/refresh-black.svg'\nimport RefreshIcon from '/icons/refresh.svg'\nimport BlockIcon from '/icons/block.svg'\nimport ConnectionIcon from '/icons/connection.svg'\nimport { convertSecondsToTimerFormat } from '../../utilities'\n\ntype SyncStatusProps = {\n  isPairing: boolean\n  isAwaitingPairing?: boolean\n  changeSetIsAwaitingPairing: (isAwaitingPairing: boolean) => void\n}\n\nconst SyncStatus = ({\n  isPairing,\n  isAwaitingPairing,\n  changeSetIsAwaitingPairing,\n}: SyncStatusProps) => {\n  const [elapsedTime, setElapsedTime] = useState(0)\n\n  const resetTimer = () => {\n    setElapsedTime(0)\n    changeSetIsAwaitingPairing(false)\n  }\n  useEffect(() => {\n    let timer: ReturnType<typeof setTimeout>\n\n    if (isPairing) {\n      timer = setInterval(() => {\n        setElapsedTime(prevTime => prevTime + 65)\n        if (elapsedTime >= 180) {\n          changeSetIsAwaitingPairing(true)\n        }\n      }, 1000)\n    } else {\n      changeSetIsAwaitingPairing(false)\n    }\n\n    return () => clearInterval(timer)\n  }, [isPairing, elapsedTime])\n\n  const timer = convertSecondsToTimerFormat(elapsedTime) // Assuming you've imported the convertSecondsToTimerFormat function\n\n  return (\n    <YStack space={'$2'}>\n      <XStack style={{ justifyContent: 'space-between' }}>\n        <Text size={11} color=\"#647084\" weight=\"medium\">\n          Device Sync Status\n        </Text>\n        {isPairing && (\n          <Text\n            size={isAwaitingPairing ? 15 : 11}\n            color={isAwaitingPairing ? '#EB5757' : '#647084'}\n            weight={isAwaitingPairing && 'semibold'}\n          >\n            {timer}\n          </Text>\n        )}\n        <IconButton\n          icon={<Icon src={isPairing ? RefreshBlackIcon : RefreshIcon} />}\n          onPress={resetTimer}\n          variant=\"ghost\"\n        />\n      </XStack>\n      {isPairing ? (\n        <Text size={15} color={isAwaitingPairing ? '#EB5757' : '#09101C'} weight={'semibold'}>\n          Awaiting pairing connection...\n        </Text>\n      ) : (\n        <Text size={13} color=\"#A1ABBD\">\n          No pairing input provided.\n        </Text>\n      )}\n      {isAwaitingPairing && (\n        <InformationBox\n          message=\"No connection has been created to a Nimbus service for over 3 minutes. Please ensure that the generated pairing ID was input into the CLI. If you are unable to pair device, consider connect via IP.   \"\n          variant=\"error\"\n          icon={<Icon src={BlockIcon} />}\n        />\n      )}\n      {isAwaitingPairing && (\n        <XStack>\n          <Button icon={<Icon src={ConnectionIcon} />} size={40}>\n            Connect via IP\n          </Button>\n        </XStack>\n      )}\n    </YStack>\n  )\n}\n\nexport default SyncStatus\n"],"names":["RefreshBlackIcon","RefreshIcon","BlockIcon","ConnectionIcon","convertSecondsToTimerFormat","seconds","minutes","remainingSeconds","SyncStatus","isPairing","isAwaitingPairing","changeSetIsAwaitingPairing","elapsedTime","setElapsedTime","useState","resetTimer","useEffect","timer2","prevTime","timer","jsxs","YStack","XStack","jsx","Text","IconButton","Icon","InformationBox","Button"],"mappings":"0OAAA,MAAeA,EAAA,GAAA,IAAA,IAAA,6BAAA,YAAA,GAAA,EAAA,KCAAC,EAAA,GAAA,IAAA,IAAA,uBAAA,YAAA,GAAA,EAAA,KCAAC,EAAA,GAAA,IAAA,IAAA,qBAAA,YAAA,GAAA,EAAA,KCAAC,EAAA,GAAA,IAAA,IAAA,0BAAA,YAAA,GAAA,EAAA,KCmBFC,EAA+BC,GAAoB,CAC5D,MAAMC,EAAU,KAAK,MAAMD,EAAU,EAAE,EACjCE,EAAmBF,EAAU,GACnC,MAAO,GAAG,OAAOC,CAAO,EAAE,SAAS,EAAG,GAAG,CAAC,IAAI,OAAOC,CAAgB,EAAE,SAAS,EAAG,GAAG,CAAC,EACzF,ECNFC,EAAA,CAAA,CAAoB,UAAAC,EAClB,kBAAAC,EACA,2BAAAC,CAEF,IAAA,CACE,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,SAAA,CAAA,EAEAC,EAAA,IAAA,CACEF,EAAA,CAAA,EACAF,EAAA,EAAA,CAAgC,EAElCK,EAAAA,UAAA,IAAA,CACE,IAAAC,EAEA,OAAAR,EACEQ,EAAA,YAAA,IAAA,CACEJ,EAAAK,GAAAA,EAAA,EAAA,EACAN,GAAA,KACED,EAAA,EAAA,CACF,EAAA,GAAA,EAGFA,EAAA,EAAA,EAGF,IAAA,cAAAM,CAAA,CAAgC,EAAA,CAAAR,EAAAG,CAAA,CAAA,EAGlC,MAAAO,EAAAf,EAAAQ,CAAA,EAEA,OAAAQ,EAAA,KAAAC,EAAA,CAAA,MAAA,KAAA,SAAA,CAEID,EAAA,KAAAE,EAAA,CAAA,MAAA,CAAA,eAAA,eAAA,EAAA,SAAA,CACEC,EAAAA,IAAAC,EAAA,CAAA,KAAA,GAAA,MAAA,UAAA,OAAA,SAAA,SAAA,oBAAA,CAAA,EAEAf,GAAAc,EAAA,IAEEC,EAAC,CAAA,KAAAd,EAAA,GAAA,GACgC,MAAAA,EAAA,UAAA,UACQ,OAAAA,GAAA,WACV,SAAAS,CAE5B,CAAA,EACHI,EAAA,IAEFE,EAAC,CAAA,KAAAF,EAAA,IAAAG,EAAA,CAAA,IAAAjB,EAAAT,EAAAC,EAAA,EAC8D,QAAAc,EACpD,QAAA,OACD,CAAA,CACV,EAAA,EACFN,EAAAc,EAAA,IAAAC,EAAA,CAAA,KAAA,GAAA,MAAAd,EAAA,UAAA,UAAA,OAAA,WAAA,SAAA,iCAAA,EAAAa,MAAAC,EAAA,CAAA,KAAA,GAAA,MAAA,UAAA,SAAA,4BAAA,CAAA,EAQEd,GAAAa,EAAA,IAGAI,EAAC,CAAA,QAAA,2MACS,QAAA,QACA,KAAAJ,EAAAA,IAAAG,EAAA,CAAA,IAAAxB,CAAA,CAAA,CACoB,CAAA,EAC9BQ,GAAAa,EAAAA,IAAAD,EAAA,CAAA,SAAAC,EAAAA,IAAAK,EAAA,CAAA,KAAAL,EAAA,IAAAG,EAAA,CAAA,IAAAvB,CAAA,CAAA,EAAA,KAAA,GAAA,SAAA,gBAAA,CAAA,EAAA,CAOA,CAAA,CAAA,CAIR"}