name: 'UI tests'

on:
  push:
    branches:
      - '*'
      - '!main'

permissions:
  pull-requests: write
  deployments: write

jobs:
  cache-dependencies:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Commit
        uses: actions/checkout@v2
      - name: Cache yarn dependencies and cypress
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: |
            ~/.cache/Cypress
            node_modules
          key: ${{ runner.os }}-yarn-v3-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-v3
      - name: Install dependencies if cache invalid
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn

  build-and-deploy:
    runs-on: ubuntu-latest
    if: ${{ runner.environment == 'github-hosted' }}
    needs: cache-dependencies
    steps:
      - uses: actions/checkout@v2
      - name: Get PR number
        id: pull_request
        run: echo "::set-output name=number::$(gh pr view --json number -q .number || echo "null")"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/setup-node@v2
        with:
          node-version: '18.x'
      - name: Restore yarn dependencies
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: |
            ~/.cache/Cypress
            node_modules
          key: ${{ runner.os }}-yarn-v3-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-v3
      - name: Build
        run: yarn build
      - name: Check formatting
        run: yarn format:check
      - name: Pull Vercel configuration
        run: yarn vercel pull --scope metacraft-labs --yes --token ${{ secrets.vercel_token }}
      - name: Build Vercel bundle
        run: yarn vercel build
      - name: Deploy to Vercel
        run: yarn vercel deploy --scope metacraft-labs --prebuilt --token ${{ secrets.vercel_token }} > _vercel-deployment-url
      - name: Comment on PR with deployment URL
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pullRequestNumber = ${{ steps.pull_request.outputs.number }};
            if (pullRequestNumber === null) {
              return;
            }
            const fs = require('fs');
            const deploymentUrl = fs.readFileSync('_vercel-deployment-url', 'utf8');
            await github.rest.issues.createComment({
              issue_number: ${{ steps.pull_request.outputs.number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Deployed to ${deploymentUrl}`,
            });
      - name: Add deployment to PR
        uses: actions/github-script@v6
        id: deployment
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const deploymentUrl = fs.readFileSync('_vercel-deployment-url', 'utf8');
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'preview',
              transient_environment: true,
              required_contexts: [],
              auto_merge: false,
              production_environment: false,
              payload: JSON.stringify({
                deploymentUrl,
              }),
            });
            console.log("::set-output name=deployment_id::" + deployment.data.id);
      - name: Add deployment status to PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const deploymentUrl = fs.readFileSync('_vercel-deployment-url', 'utf8');
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.deployment_id }},
              state: 'success',
              environment_url: deploymentUrl,
              log_url: deploymentUrl,
              description: 'Deployed to Vercel',
              environment: 'preview',
              auto_inactive: true,
            });

  interaction-and-and-accessibility:
    runs-on: ubuntu-latest
    needs: cache-dependencies
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '18.x'
      - name: Restore yarn dependencies
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: |
            ~/.cache/Cypress
            node_modules
          key: ${{ runner.os }}-yarn-v3-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-v3
      - name: Install Playwright
        run: npx playwright install --with-deps
      - name: Build Storybook
        run: |
          export VITE_COIN_GECKO_API_KEY=${{secrets.VITE_COIN_GECKO_API_KEY}} && \
            yarn build-storybook --quiet
      - name: Run Storybook tests
        run: |
          npx concurrently -k -s first -n "SB,TEST" -c "magenta,blue" \
            "npx http-server storybook-static --port 6006 --silent" \
            "npx wait-on tcp:127.0.0.1:6006 && yarn test-storybook"
